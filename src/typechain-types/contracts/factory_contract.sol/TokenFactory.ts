/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TokenFactoryInterface extends utils.Interface {
  functions: {
    "createNFT(string,string)": FunctionFragment;
    "createToken(string,string,uint256)": FunctionFragment;
    "getPauseAllStatus()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseERC20Contract(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPauseAllStatus(bool)": FunctionFragment;
    "superERC20TokenAddress()": FunctionFragment;
    "superNftTokenAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createNFT"
      | "createToken"
      | "getPauseAllStatus"
      | "owner"
      | "pauseERC20Contract"
      | "renounceOwnership"
      | "setPauseAllStatus"
      | "superERC20TokenAddress"
      | "superNftTokenAddress"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPauseAllStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseERC20Contract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseAllStatus",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "superERC20TokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "superNftTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "createNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPauseAllStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseERC20Contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseAllStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "superERC20TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "superNftTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AllContractsPaused(address,uint256)": EventFragment;
    "ContractPaused(address,uint256)": EventFragment;
    "ERC20Created(address,address,uint256)": EventFragment;
    "NftCreated(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllContractsPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AllContractsPausedEventObject {
  owner: string;
  timeStamp: BigNumber;
}
export type AllContractsPausedEvent = TypedEvent<
  [string, BigNumber],
  AllContractsPausedEventObject
>;

export type AllContractsPausedEventFilter =
  TypedEventFilter<AllContractsPausedEvent>;

export interface ContractPausedEventObject {
  erc20Address: string;
  timeStamp: BigNumber;
}
export type ContractPausedEvent = TypedEvent<
  [string, BigNumber],
  ContractPausedEventObject
>;

export type ContractPausedEventFilter = TypedEventFilter<ContractPausedEvent>;

export interface ERC20CreatedEventObject {
  erc20Address: string;
  ownerAddress: string;
  index: BigNumber;
}
export type ERC20CreatedEvent = TypedEvent<
  [string, string, BigNumber],
  ERC20CreatedEventObject
>;

export type ERC20CreatedEventFilter = TypedEventFilter<ERC20CreatedEvent>;

export interface NftCreatedEventObject {
  nftAddress: string;
  ownerAddress: string;
  index: BigNumber;
}
export type NftCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  NftCreatedEventObject
>;

export type NftCreatedEventFilter = TypedEventFilter<NftCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createNFT(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPauseAllStatus(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseERC20Contract(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPauseAllStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    superERC20TokenAddress(overrides?: CallOverrides): Promise<[string]>;

    superNftTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createNFT(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createToken(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPauseAllStatus(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseERC20Contract(
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPauseAllStatus(
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  superERC20TokenAddress(overrides?: CallOverrides): Promise<string>;

  superNftTokenAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createNFT(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPauseAllStatus(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseERC20Contract(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPauseAllStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    superERC20TokenAddress(overrides?: CallOverrides): Promise<string>;

    superNftTokenAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllContractsPaused(address,uint256)"(
      owner?: null,
      timeStamp?: null
    ): AllContractsPausedEventFilter;
    AllContractsPaused(
      owner?: null,
      timeStamp?: null
    ): AllContractsPausedEventFilter;

    "ContractPaused(address,uint256)"(
      erc20Address?: null,
      timeStamp?: null
    ): ContractPausedEventFilter;
    ContractPaused(
      erc20Address?: null,
      timeStamp?: null
    ): ContractPausedEventFilter;

    "ERC20Created(address,address,uint256)"(
      erc20Address?: null,
      ownerAddress?: null,
      index?: null
    ): ERC20CreatedEventFilter;
    ERC20Created(
      erc20Address?: null,
      ownerAddress?: null,
      index?: null
    ): ERC20CreatedEventFilter;

    "NftCreated(address,address,uint256)"(
      nftAddress?: null,
      ownerAddress?: null,
      index?: null
    ): NftCreatedEventFilter;
    NftCreated(
      nftAddress?: null,
      ownerAddress?: null,
      index?: null
    ): NftCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    createNFT(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPauseAllStatus(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseERC20Contract(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPauseAllStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    superERC20TokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    superNftTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNFT(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPauseAllStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseERC20Contract(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPauseAllStatus(
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    superERC20TokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    superNftTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
